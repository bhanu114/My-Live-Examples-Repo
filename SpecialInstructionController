/*
 HISTORY                                                                  
 |                                                                           
 |   DATE            DEVELOPER        WR/Req         DESCRIPTION                               
 |   ====            =========        ======         =========== 
 |  23-MAY-2016       BhanuPrakash    R4            Initial Creatoin
*/
/*
*   Class Name  :   SpecialInstructionController
*   Class Type  :   Controller
*/
public with sharing class SpecialInstructionController {
    public List<Account> hyAccList {get;set;} {hyAccList = new List<Account>();}
    public Special_Instructions__c si {get;set;}
    public Account acc {get;set;} {acc = new Account();}
    public List<Account> localAccList {get;set;} {localAccList = new List<Account>();}
    
    public List<LocalAccWrapper> lawHyList {set; get;}{lawHyList = new List<LocalAccWrapper>();}
    public List<LocalAccWrapper> lawLocList {set; get;}{lawLocList = new List<LocalAccWrapper>();}
    public List<LocalAccWrapper> selectedHYWraps {set; get;}{selectedHYWraps = new List<LocalAccWrapper>();}
    public List<LocalAccWrapper> selectedWraps {set; get;}{selectedWraps = new List<LocalAccWrapper>();}
    
    public List<SelectOption> rtNamesList {set; get;}
    
    public String searchString {set; get;}
    public String contSupStrat {set; get;}
    public String siteNO {set; get;}
    public String selectedRTId {set; get;}
    public Boolean isHyrachyAcc {get;set;}
    
    public List<SelectOption> cssPOptions {set; get;}{cssPOptions = new List<SelectOption>();}
    Map<String,Account_Record_Type_List__c> accRTMap = null;
    
    
    public SpecialInstructionController(ApexPages.StandardController stdController) {
        si = new Special_Instructions__c();
        si.OwnerId = UserInfo.getUserId();
        si.Effective_Date__c = System.today();
        si.Expiration_Date__c = System.today().addMonths(12);
        
        isHyrachyAcc = false;
        rtNamesList = new List<SelectOption>();
        
        //Get Account_Record_Type_List__c Custom setting to initiate piclist values with SI Record Types
        accRTMap = Account_Record_Type_List__c.getall();
        System.debug('***** accRTMap = ' + accRTMap.get('Hierarchy Node').RT_ID_value__c);
        //rtNamesList.add(new SelectOption('','Select--'));
        rtNamesList.add(new SelectOption(accRTMap.get('Location').RT_ID_value__c,'Location'));
        rtNamesList.add(new SelectOption(accRTMap.get('Hierarchy Node').RT_ID_value__c,'Hierarchy Node'));
        
        Schema.DescribeFieldResult fieldResult = Account.Controlled_Support_Strategy__c.getDescribe();
        List<Schema.PicklistEntry> ple = fieldResult.getPicklistValues();
        for( Schema.PicklistEntry f : ple)
        {
          cssPOptions.add(new SelectOption(f.getValue(), f.getValue()));
        }  
    }

    /*
    *   Method Name         :   SpecialInstructionController
    *   Method Type         :   Constructor
    *   Method Visibility   :   Public
    *   Use Of this Method :    To Initialize variables to show in VF page
    *   Parameter List      :   NO
    *   Return Type         :   NA
    */
    public SpecialInstructionController(){
        
    }
    /*
    *   Method Name         :   search
    *   Method Type         :   Instance
    *   Method Visibility   :   Public
    *   Use Of this Method :    To perform search based on user selected Account record type and search string
    *   Parameter List      :   NO
    *   Return Type         :   PageReference
    */
    public PageReference search(){
        //Clear Previous Search result
        selectedWraps.clear();
        lawHyList.clear();
        lawHyList.clear();
        
        //try {
            //IF selected record type is Hierarchy Node
            if(selectedRTId != null && selectedRTId.equals(accRTMap.get('Hierarchy Node').RT_ID_value__c )){
            
                hyAccList = SpecialInstructionHelper.getHYAccsByRTypeID(searchString, selectedRTId, contSupStrat,siteNO);
                if(hyAccList != null && hyAccList.size() > 0){
                    lawHyList = getWrappersFromList(hyAccList);
                }else {
                    ApexPages.addmessage(new ApexPages.message(ApexPages.severity.WARNING,'No records are found!'));
                } 
            } else if(selectedRTId != null && selectedRTId.equals(accRTMap.get('Location').RT_ID_value__c) 
                || selectedRTId == null 
                || selectedRTId.equals('') ){//IF selected record type is 'Location'
                 getLocationAccsOnSearch();
                if(localAccList.size() < 1){
                     ApexPages.addmessage(new ApexPages.message(ApexPages.severity.WARNING,'No records are found!'));
                } 
            }
            
        //Get all Account records with selected Record Type Name and matching searching String with Account Name
        //}catch(Exception ex){
            //System.debug('***** ################## Exceptin on Search method = ' + ex);
            //throw new CustomException(ex);
        //}
        System.debug('*** Search, bereor return, to 2 ');
        PageReference pr = new PageReference('/apex/SI_Location_Page2');
        //return pr;
        return null;
    }
    /*
    *   Method Name         :   getLocationAccsOnSearch
    *   Method Type         :   Instance
    *   Method Visibility   :   Public
    *   Use Of this Method :    To get Location Accounts based on user selected Account record type as Location
    *   Parameter List      :   NO
    *   Return Type         :   PageReference
    */
    public PageReference getLocationAccsOnSearch(){
        
        if(selectedRTId == null || selectedRTId.equals('') || selectedRTId.equals(accRTMap.get('Location').RT_ID_value__c)){
            localAccList = SpecialInstructionHelper.getLocationAccsByRTypeID(searchString, accRTMap.get('Location').RT_ID_value__c, contSupStrat,siteNO);
            lawLocList = getWrappersFromList(localAccList);
			if(lawLocList == null || lawLocList.size() == 0 ){
				 ApexPages.addmessage(new ApexPages.message(ApexPages.severity.WARNING,'No records are found!'));
			}
        } 
        PageReference pr = new PageReference('/apex/SI_Location_Page3');
        //return pr;
        return null;
    }
        /*
    *   Method Name         :   getLocationAccsOnHYSelect
    *   Method Type         :   Instance
    *   Method Visibility   :   Public
    *   Use Of this Method :    To get Location Accounts based on user selected Parent Account
    *   Parameter List      :   NO
    *   Return Type         :   PageReference
    */
    public PageReference getLocationAccsOnHYSelect(){
    
        selectedHYWraps =  getSelectedWrappersFromList(lawHyList);
        Set<Id> hyAccIdSet = new Set<Id>();
        
        for(LocalAccWrapper law : selectedHYWraps){
            hyAccIdSet.add(law.acc.Id);
        }
        if(hyAccIdSet.size() > 0){
            localAccList  = new List<Account>();
            localAccList = SpecialInstructionHelper.getAccsByParentId(hyAccIdSet, contSupStrat);
            if(localAccList.size() > 0 ){
                lawLocList = getWrappersFromList(localAccList);
            } else {
                 ApexPages.addmessage(new ApexPages.message(ApexPages.severity.WARNING,'No records are found!'));
        }
        }
        PageReference pr = new PageReference('/apex/SI_Location_Page4');
        //return pr;
        return null;
    }
        /*
    *   Method Name         :   prepareLocationAccs
    *   Method Type         :   Instance, UTILITY
    *   Method Visibility   :   Public
    *   Use Of this Method  :   To get Location Accounts based on user selected Parent Account
    *   Parameter List      :
    *               Param 1.
    *               Param 2.
    *   Return Type         :   
    */
    public PageReference prepareLocationAccs(){
        System.debug('*** prepareLocationAccs');
        //AccountSpecialinstruction__c sij = new AccountSpecialinstruction__c();
        
        //Identify all selected Location Accounts to generate Special Instruction Junction object
        selectedWraps = getSelectedWrappersFromList(lawLocList);
        
        System.debug('*** prepareLocationAccs, bereor return to 4, ');
        PageReference pr = new PageReference('/apex/SI_Location_Page4');
        //return pr;
        return null;
    }
        /*
    *   Method Name         :   createSIJunction
    *   Method Type         :   
    *   Method Visibility   :   
    *   User Of this Method :   
    *   Parameter List      :   
    *               Param 1.
    *               Param 2.
    *   Return Type         :   
    */
    public PageReference createSIJunction(){
        List<Special_Instructions__c> siCreateList = new List<Special_Instructions__c>();
        Special_Instructions__c newMasterSI = null;
        Special_Instructions__c newSI = null;
        //String dependentSIAccountNames = '';
        
        List<AccountSpecialinstruction__c> sijList = new List<AccountSpecialinstruction__c>();
        AccountSpecialinstruction__c sij = null;
        
        String accSIRTID = SI_Record_Type_Name_ID_List__c.getAll().get('Account Special Instruction').RT_ID_value__c;
System.debug('***** accSIRTID= ' + accSIRTID);
        
        //CRETE MASTER SI RECORD TO 
        newMasterSI = new Special_Instructions__c();
        newMasterSI.Type__c = si.Type__c;
        newMasterSI.Audience__c = si.Audience__c;
        newMasterSI.Active__c = false;
        newMasterSI.Special_Instruction_Text__c = si.Special_Instruction_Text__c;
        
        //newMasterSI.Account__c = selectedWraps[0].acc.Id;
        newMasterSI.Effective_Date__c = si.Effective_Date__c;
        newMasterSI.Expiration_Date__c = si.Expiration_Date__c;
        newMasterSI.RecordTypeID = accSIRTID;
        newMasterSI.Status__c = 'New';
        newMasterSI.Controlled_Support_Strategy__c = contSupStrat;
    
        try {
            Database.Insert(newMasterSI);
        }catch(Exception ex){
           System.debug('***** ############# Exception while inserting SI objects : ' + ex.getMessage());
			ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR,ex.getMessage()));
			return null;
        }
        
        String siAccountRTID = SI_Record_Type_Name_ID_List__c.getall().get('Account Special Instruction').RT_ID_value__c;
        System.debug('**** siAccountRTID = ' + siAccountRTID);
        
        for(Integer i=0; i< selectedWraps.size();i++) {
                sij = new AccountSpecialinstruction__c();
                sij.Account__c = selectedWraps[i].acc.Id;
                sij.Special_Instructions__c = newMasterSI.Id;//si.Id;
                //sij.Controlled_Support_Strategy__c = newMasterSI.Controlled_Support_Strategy__c;// it is a formula field can't be over wirtten
                sijList.add(sij);
        }
        
        //INSERT JUNCTION RECORDS
        try{
            Database.Insert(sijList);
            System.debug('**** $$$$$$$$$$$$$$$ Junction insurtion success!');
        }catch(Exception ex){
            System.debug('***** ############# Exception while inserting Junciton objects : ' + ex.getMessage());
			ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR,ex.getMessage()));
			return null;
        }
        
        return new PageReference('/'+ newMasterSI.Id);
    }
    
    
    public PageReference reDirectToViewAllPage(){
        //return new PageReference('/a1H?000000000000000_listSelect=00B63000000MUq5');
		return new PageReference(Special_Instructions_Settings__c.getInstance().SI_TabURL__c);
		
    }
    public PageReference cancel(){
        return new PageReference(Special_Instructions_Settings__c.getInstance().SI_TabURL__c);
    }
    
    public PageReference selectAllHYWrappers(){
        selectAllWrappers(lawHyList);
        return null;
    }
    
    
    public PageReference selectAllLocationWrappers(){
        selectAllWrappers(lawLocList);
        return null;
    }
    public static void selectAllWrappers(List<LocalAccWrapper> warapers){
        for(LocalAccWrapper law : warapers){
            law.isSelected = true;
        }
    }
    
        /*
    *   Method Name         :   getWrappersFromList
    *   Method Type         :   Instance, UTILITY, Static
    *   Method Visibility   :   Public
    *   User Of this Method :   To convert List of Accounts to List of LocalAccWrapper
    *   Parameter List      :   
    *               Param 1.    accList (List<Account>)
    *   Return Type         :   List<LocalAccWrapper>
    */
    public static List<LocalAccWrapper> getWrappersFromList(List<Account> accList){
        List<LocalAccWrapper> lawList = new List<LocalAccWrapper>();
        LocalAccWrapper law = null;
        
        for(Account a : accList){
            law = new LocalAccWrapper(a);
            lawList.add(law);
        }
        return lawList;
    }
    /*
    *   Method Name         :   getSelectedWrappersFromList
    *   Method Type         :   Instance, UTILITY, Static
    *   Method Visibility   :   Public
    *   User Of this Method :   On selecting Location Account record find and return only selected Account Wrapper classes
    *   Parameter List      :   
    *               Param 1.    allWrappers (List<LocalAccWrapper>)
    *   Return Type         :   List<LocalAccWrapper>
    */
    public static List<LocalAccWrapper> getSelectedWrappersFromList(List<LocalAccWrapper> allWrappers){
        List<LocalAccWrapper> selectedWraps = new List<LocalAccWrapper>();
        for(LocalAccWrapper law : allWrappers){
            if(law.isSelected){
                selectedWraps.add(law);
            }
        }
        return selectedWraps;
    }
    /*
    *   Class Name  :   LocalAccWrapper
    *   Class Type  :   Wrapper
    */
    public class LocalAccWrapper {
        public Boolean isSelected = false;
        public void setIsSelected(Boolean val){
                    this.isSelected = val;
        }

        public Boolean getIsSelected(){
                 return isSelected;
        }
        public Account acc {set; get;}
        public LocalAccWrapper(Account acc){
            isSelected = false;
            this.acc = acc;
        }
    }
    /*
    *   Class Name  :   CustomException
    *   Class Type  :   Exception
    */
    public class CustomException extends Exception {}
}
